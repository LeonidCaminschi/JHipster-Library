package com.esempla.library.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BookAuthorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookAuthorAllPropertiesEquals(BookAuthor expected, BookAuthor actual) {
        assertBookAuthorAutoGeneratedPropertiesEquals(expected, actual);
        assertBookAuthorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookAuthorAllUpdatablePropertiesEquals(BookAuthor expected, BookAuthor actual) {
        assertBookAuthorUpdatableFieldsEquals(expected, actual);
        assertBookAuthorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookAuthorAutoGeneratedPropertiesEquals(BookAuthor expected, BookAuthor actual) {
        assertThat(actual)
            .as("Verify BookAuthor auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookAuthorUpdatableFieldsEquals(BookAuthor expected, BookAuthor actual) {
        // empty method

    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookAuthorUpdatableRelationshipsEquals(BookAuthor expected, BookAuthor actual) {
        assertThat(actual)
            .as("Verify BookAuthor relationships")
            .satisfies(a -> assertThat(a.getAuthor()).as("check author").isEqualTo(expected.getAuthor()))
            .satisfies(a -> assertThat(a.getBook()).as("check book").isEqualTo(expected.getBook()));
    }
}
